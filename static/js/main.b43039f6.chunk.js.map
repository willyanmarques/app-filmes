{"version":3,"sources":["components/Loading/index.js","pages/Home/index.js","pages/Filme/index.js","pages/Erro/index.js","components/Header/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Loading","props","state","className","type","color","Component","Home","filmes","loading","carregarFilmes","bind","this","api","get","then","response","data","res","console","log","setState","map","filme","key","id","src","foto","alt","nome","text","sinopse","length","to","Filme","match","params","url","light","playing","width","height","controls","Erro","Header","Routes","exact","path","component","App","registerServiceWorker","navigator","window","addEventListener","serviceWorker","register","registration","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qgBAkBeA,G,wDAbb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OACE,yBAAKC,UAAU,WACb,kBAAC,IAAD,CAASA,UAAU,UAAUC,KAAM,OAAQC,MAAM,iB,GARnCC,c,mDC4DPC,G,wDArDb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXM,OAAQ,GACRC,SAAS,GAEX,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANL,E,gEAUjBC,KAAKF,mB,6JAIK,mD,SACQG,IAAIC,IADZ,oDAEPC,MAAK,SAAUC,GACd,OAAOA,EAASC,Q,OAFdC,E,OAINC,QAAQC,IAAIF,GACZN,KAAKS,SAAS,CAAEb,OAAQU,EAAKT,SAAS,I,qIAG9B,IAAD,EACqBG,KAAKV,MAAzBM,EADD,EACCA,OAAQC,EADT,EACSA,QAChB,OACE,yBAAKN,UAAU,QAEVM,EAGCD,EAAOc,KAAI,SAACC,GACV,OACE,yBAAKC,IAAKD,EAAME,IACd,kBAAC,IAAD,KACE,6BAAStB,UAAU,QACjB,yBAAKuB,IAAKH,EAAMI,KAAMC,IAAI,eAC1B,wBAAIzB,UAAU,UAAUoB,EAAMM,MAC9B,uBAAG1B,UAAU,WACX,kBAAC,IAAD,CAAc2B,KAAMP,EAAMQ,QAASC,OAAQ,OAE7C,kBAAC,IAAD,CAAMC,GAAE,iBAAYV,EAAME,IAAMtB,UAAU,cAA1C,kBAZV,kBAAC,EAAD,W,GAhCOG,c,iBC4CJ4B,G,wDA5Cb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXqB,MAAO,GACPd,SAAS,GAJM,E,2LASTgB,EAAOb,KAAKX,MAAMkC,MAAMC,OAAxBX,GACJY,E,2DAA0DZ,G,SAC5CZ,IAAIC,IAAIuB,GACvBtB,MAAK,SAAUC,GACd,OAAOA,EAASC,Q,OAFdC,E,OAINN,KAAKS,SAAS,CAAEE,MAAOL,EAAKT,SAAS,I,qIAG7B,IAAD,EACoBG,KAAKV,MAAxBqB,EADD,EACCA,MAAOd,EADR,EACQA,QACf,OACE,yBAAKN,UAAU,SAEVM,EAGC,yBAAKN,UAAU,cACb,kBAAC,IAAD,CAAakC,IAAI,oDACfC,MAAOf,EAAMI,KACbY,SAAO,EACPC,MAAM,OACNC,OAAO,QACPC,UAAU,IAEZ,wBAAIvC,UAAU,UAAUoB,EAAMM,MAC9B,2BAAIN,EAAMQ,SACV,kBAAC,IAAD,CAAME,GAAG,IAAI9B,UAAU,aAAvB,wBAZF,kBAAC,EAAD,W,GAzBQG,cCeLqC,G,wDAjBb,WAAY1C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,QACb,mCACA,8DACA,kBAAC,IAAD,CAAM8B,GAAG,KAAT,6B,GAXS3B,cCcJsC,G,wDAbb,WAAY3C,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAM8B,GAAG,KAAT,qB,GARa3B,cCkBNuC,EAfA,WAEb,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,aAAaC,UAAWd,IAC1C,kBAAC,IAAD,CAAOa,KAAK,IAAIC,UAAWL,OCGpBM,E,kDAbb,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAKjB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GARUG,aC0IL4C,EAAwB,WAC/B,kBAAmBC,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cAAcC,SAAS,UAAUxC,MAAK,SAAUyC,OAGvDC,OAAM,SAAUC,WC7IzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.b43039f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Spinner from 'react-loading';\r\nimport './loading.css';\r\n\r\nclass Loading extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"loading\">\r\n        <Spinner className=\"spinner\" type={\"bars\"} color=\"#7159c1\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Loading;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Loading from '../../components/Loading';\r\nimport FadeIn from 'react-fade-in';\r\nimport api from 'axios';\r\nimport EllipsisText from \"react-ellipsis-text\";\r\nimport './home.css';\r\n\r\nclass Home extends Component {\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filmes: [],\r\n      loading: false\r\n    }\r\n    this.carregarFilmes = this.carregarFilmes.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.carregarFilmes();\r\n  }\r\n\r\n  async carregarFilmes() {\r\n    let url = 'https://sujeitoprogramador.com/r-api/?api=filmes';\r\n    const res = await api.get(url)\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n    console.log(res);\r\n    this.setState({ filmes: res, loading: true });\r\n  }\r\n\r\n  render() {\r\n    const { filmes, loading } = this.state;\r\n    return (\r\n      <div className=\"home\">\r\n        {\r\n          !loading ?\r\n            <Loading />\r\n            :\r\n            filmes.map((filme) => {\r\n              return (\r\n                <div key={filme.id}>\r\n                  <FadeIn>\r\n                    <article className=\"card\">\r\n                      <img src={filme.foto} alt=\"capa filme\" />\r\n                      <h3 className=\"titulo\">{filme.nome}</h3>\r\n                      <p className=\"sinopse\">\r\n                        <EllipsisText text={filme.sinopse} length={200} />\r\n                      </p>\r\n                      <Link to={`/filme/${filme.id}`} className=\"btnDetalhe\">Detalhes</Link>\r\n                    </article>\r\n                  </FadeIn>\r\n                </div>\r\n              );\r\n            })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport api from 'axios';\r\nimport ReactPlayer from 'react-player';\r\nimport { Link } from 'react-router-dom';\r\nimport Loading from '../../components/Loading';\r\nimport './filme.css';\r\n\r\nclass Filme extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filme: [],\r\n      loading: false\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    let url = `https://sujeitoprogramador.com/r-api/?api=filmes/${id}`;\r\n    const res = await api.get(url)\r\n      .then(function (response) {\r\n        return response.data;\r\n      });\r\n    this.setState({ filme: res, loading: true });\r\n  }\r\n\r\n  render() {\r\n    const { filme, loading } = this.state;\r\n    return (\r\n      <div className=\"filme\">\r\n        {\r\n          !loading ?\r\n            <Loading />\r\n            :\r\n            <div className=\"playerCard\">\r\n              <ReactPlayer url=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"\r\n                light={filme.foto}\r\n                playing\r\n                width=\"auto\"\r\n                height=\"360px\"\r\n                controls={true}\r\n              />\r\n              <h3 className=\"titulo\">{filme.nome}</h3>\r\n              <p>{filme.sinopse}</p>\r\n              <Link to=\"/\" className=\"btnVoltar\">Voltar ao início</Link>\r\n            </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filme;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Erro.css';\r\n\r\nclass Erro extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Erro404\">\r\n        <div className=\"card\">\r\n          <h1>404</h1>\r\n          <h3>Ops! Pagina não encontrada.</h3>\r\n          <Link to=\"/\">Voltar ao início</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Erro;","import React, { Component } from 'react';\r\nimport './header.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {  }\r\n  }\r\n  render() { \r\n    return ( \r\n      <div className=\"header\">\r\n        <Link to=\"/\">React Filmes</Link>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Home from './pages/Home';\r\nimport Filme from './pages/Filme';\r\nimport Erro from './pages/Erro';\r\nimport Header from './components/Header';\r\n\r\nconst Routes = () => {\r\n\r\n  return(\r\n    <BrowserRouter>\r\n      <Header/>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home}/>\r\n        <Route exact path=\"/filme/:id\" component={Filme}/>\r\n        <Route path=\"*\" component={Erro}/>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n\r\n}\r\n\r\nexport default Routes;","import React, { Component } from 'react';\nimport './App.css';\nimport Routes from './routes';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {  }\n  }\n  render() { \n    return ( \n      <div className=\"app\">\n        <Routes/>\n      </div>\n     );\n  }\n}\n \nexport default App;","// // This optional code is used to register a service worker.\n// // register() is not called by default.\n\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n\n// export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready\n//       .then(registration => {\n//         registration.unregister();\n//       })\n//       .catch(error => {\n//         console.error(error.message);\n//       });\n//   }\n// }\n\nexport const registerServiceWorker = () => {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      navigator.serviceWorker.register('/sw.js').then(function (registration) {\n        // Registration was successful\n        //console.log('ServiceWorker registration successful with scope: ', registration.scope);\n      }).catch(function (err) {\n        // registration failed :(\n        //console.log('ServiceWorker registration failed: ', err);\n      });\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport * as registerServiceWorker  from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nregisterServiceWorker();\n"],"sourceRoot":""}